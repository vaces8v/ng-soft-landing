'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Icon } from '@iconify/react';
import { cn } from '@/lib/utils';

interface Message {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

const FAQ_QUESTIONS = [
  '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?',
  '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
  '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?',
  '–ö–∞–∫ –¥–æ–ª–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?',
  '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å —Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏?',
  '–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∫–æ–¥?',
  '–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞?',
  '–í—ã –¥–µ–ª–∞–µ—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
  '–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?',
  '–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?',
  '–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞?',
  '–ö–∞–∫–æ–π –æ–ø—ã—Ç —É –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã?',
  '–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ?',
  '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ?',
  '–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ MVP?',
  '–ù—É–∂–Ω–æ –ª–∏ –º–Ω–µ –∏–º–µ—Ç—å –¥–∏–∑–∞–π–Ω –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π?',
  '–í—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã?',
  '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö?',
  '–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?',
  '–í—ã –¥–µ–ª–∞–µ—Ç–µ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é?',
  '–ö–∞–∫–∏–µ CMS –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?',
  '–ú–æ–∂–Ω–æ –ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?',
  '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö?',
  '–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏?',
  '–í—ã –¥–µ–ª–∞–µ—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–µ–π?',
  '–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞?',
  '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã?',
  '–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ–µ–∫—Ç–∞?',
  '–í—ã –¥–µ–ª–∞–µ—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –æ—Ç—á–µ—Ç—ã?',
  '–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞?',
];

export function AIAssistant() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NG-Soft. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isWaitingResponse, setIsWaitingResponse] = useState(false);
  const [showFAQ, setShowFAQ] = useState(true);
  const [faqQuestions, setFaqQuestions] = useState<string[]>([]);
  const [hasUserSentMessage, setHasUserSentMessage] = useState(false);
  const [inputSuggestions, setInputSuggestions] = useState<string[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const faqTimersRef = useRef<NodeJS.Timeout[]>([]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const clearFaqTimers = () => {
    faqTimersRef.current.forEach(timer => clearInterval(timer));
    faqTimersRef.current = [];
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAQ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (isOpen && showFAQ && faqQuestions.length === 0) {
      const shuffled = [...FAQ_QUESTIONS].sort(() => Math.random() - 0.5).slice(0, 3);
      setFaqQuestions(shuffled);
    }
  }, [isOpen, showFAQ, faqQuestions.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
  const replaceQuestion = (indexToReplace: number) => {
    setFaqQuestions((current) => {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ–π—á–∞—Å
      const availableQuestions = FAQ_QUESTIONS.filter(q => !current.includes(q));
      if (availableQuestions.length === 0) return current;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      const randomQuestion = availableQuestions[Math.floor(Math.random() * availableQuestions.length)];
      
      // –ó–∞–º–µ–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
      const newQuestions = [...current];
      newQuestions[indexToReplace] = randomQuestion;
      return newQuestions;
    });
  };

  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è —Å–º–µ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤
  useEffect(() => {
    if (!showFAQ || faqQuestions.length === 0) return;

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã
    clearFaqTimers();

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫)
    faqTimersRef.current.push(
      setInterval(() => replaceQuestion(0), 10000)
    );

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∫–∞–∂–¥—ã–µ 25 —Å–µ–∫)
    faqTimersRef.current.push(
      setInterval(() => replaceQuestion(1), 25000)
    );

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∫–∞–∂–¥—ã–µ 35 —Å–µ–∫)
    faqTimersRef.current.push(
      setInterval(() => replaceQuestion(2), 35000)
    );
    return () => {
      clearFaqTimers();
    };
  }, [showFAQ, faqQuestions.length]);

  useEffect(() => {
    return () => {
      clearFaqTimers();
    };
  }, []);

  const sendQuickQuestion = async (question: string) => {
    const userMessage: Message = {
      role: 'user',
      content: question,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setHasUserSentMessage(true);
    setInputSuggestions([]);
    setIsLoading(true);
    setIsWaitingResponse(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: question,
          history: messages.slice(-6).map((msg) => ({
            role: msg.role,
            content: msg.content,
          })),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to get response');
      }

      const reader = response.body?.getReader();
      const decoder = new TextDecoder('utf-8');

      if (!reader) {
        throw new Error('No reader available');
      }

      let accumulatedContent = '';
      let messageCreated = false;
      let assistantMessageIndex = messages.length + 1;

      while (true) {
        const { done, value } = await reader.read();

        if (done) break;

        let chunk = decoder.decode(value, { stream: true });
        if (!chunk) continue;

        chunk = chunk.replace(/[\u{1F300}-\u{1F9FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '');
        if (!chunk) continue;

        if (!messageCreated) {
          setIsWaitingResponse(false);
          setMessages((prev) => [
            ...prev,
            {
              role: 'assistant',
              content: '',
              timestamp: new Date(),
            },
          ]);
          messageCreated = true;
        }

        accumulatedContent += chunk;

        setMessages((prev) => {
          const newMessages = [...prev];
          if (newMessages[assistantMessageIndex]) {
            newMessages[assistantMessageIndex] = {
              role: 'assistant',
              content: accumulatedContent,
              timestamp: new Date(),
            };
          }
          return newMessages;
        });
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      setIsWaitingResponse(false);
      setMessages((prev) => [
        ...prev,
        {
          role: 'assistant',
          content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}\n\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ API –∫–ª—é—á GROQ_API_KEY –≤ .env\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`,
          timestamp: new Date(),
        },
      ]);
    } finally {
      setIsLoading(false);
      setIsWaitingResponse(false);
    }
  };

  const handleFAQClick = (question: string) => {
    setShowFAQ(false);
    clearFaqTimers();
    void sendQuickQuestion(question);
  };

  const handleSuggestionClick = (question: string) => {
    void sendQuickQuestion(question);
  };

  const handleSend = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      role: 'user',
      content: input,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setHasUserSentMessage(true);
    setInputSuggestions([]);
    if (showFAQ) {
      setShowFAQ(false);
      clearFaqTimers();
    }
    setIsLoading(true);
    setIsWaitingResponse(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: currentInput,
          history: messages.slice(-6).map((msg) => ({
            role: msg.role,
            content: msg.content,
          })),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to get response');
      }

      // –ß–∏—Ç–∞–µ–º stream —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π UTF-8
      const reader = response.body?.getReader();
      const decoder = new TextDecoder('utf-8');

      if (!reader) {
        throw new Error('No reader available');
      }

      let accumulatedContent = '';
      let messageCreated = false;
      let assistantMessageIndex = messages.length + 1;

      while (true) {
        const { done, value } = await reader.read();

        if (done) {
          break;
        }

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º chunk
        let chunk = decoder.decode(value, { stream: true });
        
        if (!chunk) continue;

        // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        chunk = chunk.replace(/[\u{1F300}-\u{1F9FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '');
        
        if (!chunk) continue;

        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º chunk —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        if (!messageCreated) {
          setIsWaitingResponse(false);
          setMessages((prev) => [
            ...prev,
            {
              role: 'assistant',
              content: '',
              timestamp: new Date(),
            },
          ]);
          messageCreated = true;
        }

        accumulatedContent += chunk;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessages((prev) => {
          const newMessages = [...prev];
          if (newMessages[assistantMessageIndex]) {
            newMessages[assistantMessageIndex] = {
              role: 'assistant',
              content: accumulatedContent,
              timestamp: new Date(),
            };
          }
          return newMessages;
        });
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      setIsWaitingResponse(false);
      setMessages((prev) => [
        ...prev,
        {
          role: 'assistant',
          content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}\n\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`,
          timestamp: new Date(),
        },
      ]);
    } finally {
      setIsLoading(false);
      setIsWaitingResponse(false);
    }
  };

  useEffect(() => {
    if (!hasUserSentMessage || !input.trim()) {
      setInputSuggestions([]);
      return;
    }

    const normalized = input.trim().toLowerCase();
    if (!normalized) {
      setInputSuggestions([]);
      return;
    }

    const words = normalized.split(/\s+/).filter(Boolean);
    if (words.length === 0) {
      setInputSuggestions([]);
      return;
    }

    const matches = FAQ_QUESTIONS.filter((question) =>
      words.some((word) => question.toLowerCase().includes(word))
    )
      .slice(0, 3);

    setInputSuggestions(matches);
  }, [input, hasUserSentMessage]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ */}
      <motion.button
        onClick={() => setIsOpen(true)}
        className={cn(
          'fixed bottom-6 right-6 w-14 h-14 rounded-2xl cursor-pointer',
          'bg-neutral-900 dark:bg-white',
          'text-white dark:text-neutral-900',
          'shadow-lg hover:shadow-xl',
          'flex items-center justify-center z-50',
          'transition-all duration-300',
          isOpen && 'scale-0 pointer-events-none'
        )}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        aria-label="–û—Ç–∫—Ä—ã—Ç—å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
      >
        <Icon icon="lucide:message-circle" className="h-6 w-6" />
      </motion.button>

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 20 }}
            transition={{ duration: 0.2 }}
            className="fixed bottom-0 right-0 md:bottom-6 md:right-6 w-full h-full md:w-[400px] md:h-[650px] md:rounded-2xl bg-white dark:bg-neutral-950 shadow-2xl z-50 flex flex-col overflow-hidden border border-neutral-200 dark:border-neutral-800"
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-950">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl bg-neutral-100 dark:bg-neutral-800 flex items-center justify-center">
                  <Icon icon="lucide:bot" className="h-5 w-5 text-neutral-900 dark:text-white" />
                </div>
                <div>
                  <h3 className="font-semibold text-neutral-900 dark:text-white">AI-–ü–æ–º–æ—â–Ω–∏–∫</h3>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400">–û–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
              <button
                onClick={() => setIsOpen(false)}
                className="w-8 h-8 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 flex items-center justify-center transition-colors"
                aria-label="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
              >
                <Icon icon="lucide:x" className="h-5 w-5 text-neutral-600 dark:text-neutral-400" />
              </button>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-neutral-50 dark:bg-neutral-900">
              {messages.map((msg, idx) => {
                const isLastAssistantMessage = 
                  msg.role === 'assistant' && 
                  idx === messages.length - 1 && 
                  isLoading &&
                  !isWaitingResponse;
                
                return (
                  <motion.div
                    key={idx}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={cn(
                      'flex',
                      msg.role === 'user' ? 'justify-end' : 'justify-start'
                    )}
                  >
                    <div
                      className={cn(
                        'max-w-[85%] rounded-2xl px-4 py-3 shadow-sm',
                        msg.role === 'user'
                          ? 'bg-neutral-900 dark:bg-white text-white dark:text-neutral-900'
                          : 'bg-white dark:bg-neutral-800 text-neutral-900 dark:text-white border border-neutral-200 dark:border-neutral-700'
                      )}
                    >
                      <p className="text-sm whitespace-pre-wrap inline">
                        {msg.content}
                        {isLastAssistantMessage && msg.content && (
                          <motion.span
                            className="inline-block w-[2px] h-4 ml-0.5 -mb-0.5 bg-neutral-400 dark:bg-neutral-500"
                            animate={{ opacity: [1, 0] }}
                            transition={{ duration: 0.8, repeat: Infinity }}
                          />
                        )}
                      </p>
                    </div>
                  </motion.div>
                );
              })}
              
              {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∞–¥–µ—Ä —Å –ø—Ä—ã–≥–∞—é—â–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ */}
              {isWaitingResponse && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex justify-start"
                >
                  <div className="max-w-[85%] rounded-2xl px-4 py-3 shadow-sm bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700">
                    <div className="flex gap-1.5 items-center py-1">
                      <motion.div
                        className="w-2 h-2 bg-neutral-400 dark:bg-neutral-500 rounded-full"
                        animate={{ y: [0, -8, 0] }}
                        transition={{
                          duration: 0.6,
                          repeat: Infinity,
                          ease: "easeInOut",
                        }}
                      />
                      <motion.div
                        className="w-2 h-2 bg-neutral-400 dark:bg-neutral-500 rounded-full"
                        animate={{ y: [0, -8, 0] }}
                        transition={{
                          duration: 0.6,
                          repeat: Infinity,
                          ease: "easeInOut",
                          delay: 0.2,
                        }}
                      />
                      <motion.div
                        className="w-2 h-2 bg-neutral-400 dark:bg-neutral-500 rounded-full"
                        animate={{ y: [0, -8, 0] }}
                        transition={{
                          duration: 0.6,
                          repeat: Infinity,
                          ease: "easeInOut",
                          delay: 0.4,
                        }}
                      />
                    </div>
                  </div>
                </motion.div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* FAQ –≤–æ–ø—Ä–æ—Å—ã */}
            <AnimatePresence>
              {showFAQ && faqQuestions.length > 0 && (
                <div className="px-4 py-3 border-t border-neutral-200 dark:border-neutral-800 bg-neutral-50 dark:bg-neutral-900/50 space-y-2">
                  <p className="text-xs font-medium text-neutral-500 dark:text-neutral-400 px-1">
                    –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                  </p>
                  <div className="space-y-2">
                    <AnimatePresence mode="popLayout">
                      {faqQuestions.map((question, idx) => (
                        <motion.button
                          key={question}
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          transition={{ duration: 0.5 }}
                          onClick={() => handleFAQClick(question)}
                          className="w-full text-left px-3 py-2 rounded-lg text-sm transition-all bg-white dark:bg-neutral-800 text-neutral-900 dark:text-white hover:bg-neutral-200 dark:hover:bg-neutral-700"
                        >
                          {question}
                        </motion.button>
                      ))}
                    </AnimatePresence>
                  </div>
                </div>
              )}
            </AnimatePresence>

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–≤–æ–¥—É */}
            <AnimatePresence>
              {hasUserSentMessage && inputSuggestions.length > 0 && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="px-4 pt-3 pb-2 border-t border-neutral-200 dark:border-neutral-800 bg-white/80 dark:bg-neutral-950/80 backdrop-blur"
                >
                  <p className="text-xs font-medium text-neutral-500 dark:text-neutral-400 mb-2 px-1">
                    –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ FAQ
                  </p>
                  <div className="flex flex-wrap gap-2">
                    {inputSuggestions.map((suggestion) => (
                      <button
                        key={suggestion}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="w-full text-left px-3 py-2 rounded-lg text-xs sm:text-sm bg-neutral-100 dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                        disabled={isLoading}
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            <div className="p-4 border-t border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-950">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
                  className="flex-1 px-4 py-2.5 rounded-xl bg-neutral-100 dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 focus:border-neutral-900 dark:focus:border-white focus:ring-0 outline-none text-sm transition-colors"
                  disabled={isLoading}
                />
                <button
                  onClick={handleSend}
                  disabled={!input.trim() || isLoading}
                  className="w-10 h-10 rounded-xl bg-neutral-900 dark:bg-white text-white dark:text-neutral-900 flex items-center justify-center disabled:opacity-30 disabled:cursor-not-allowed hover:scale-105 transition-transform"
                  aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                >
                  <Icon icon="lucide:send" className="h-4 w-4" />
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
