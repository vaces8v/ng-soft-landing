#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å OpenRouter –∏ Groq API
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npm run test-ai
 *   –∏–ª–∏
 *   tsx scripts/test-ai-providers.ts
 */

import 'dotenv/config';

interface TestResult {
  provider: string;
  success: boolean;
  latency?: number;
  error?: string;
  responsePreview?: string;
}

async function testOpenRouter(): Promise<TestResult> {
  const apiKey = process.env.OPENROUTER_API_KEY;
  
  if (!apiKey) {
    return {
      provider: 'OpenRouter',
      success: false,
      error: 'OPENROUTER_API_KEY not found in .env',
    };
  }

  const startTime = Date.now();

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',
        'X-Title': 'NG-Soft AI Test',
      },
      body: JSON.stringify({
        model: 'meta-llama/llama-3.3-70b-instruct',
        messages: [
          { role: 'system', content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.' },
          { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—à—å?' },
        ],
        temperature: 0.3,
        max_tokens: 50,
      }),
    });

    const latency = Date.now() - startTime;

    if (!response.ok) {
      const error = await response.text();
      return {
        provider: 'OpenRouter',
        success: false,
        latency,
        error: `HTTP ${response.status}: ${error.substring(0, 200)}`,
      };
    }

    const data = await response.json();
    const responseText = data.choices[0]?.message?.content || 'No response';

    return {
      provider: 'OpenRouter',
      success: true,
      latency,
      responsePreview: responseText.substring(0, 100),
    };
  } catch (error) {
    return {
      provider: 'OpenRouter',
      success: false,
      latency: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

async function testGroq(): Promise<TestResult> {
  const apiKey = process.env.GROQ_API_KEY;
  
  if (!apiKey) {
    return {
      provider: 'Groq',
      success: false,
      error: 'GROQ_API_KEY not found in .env',
    };
  }

  const startTime = Date.now();

  try {
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          { role: 'system', content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.' },
          { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—à—å?' },
        ],
        temperature: 0.3,
        max_tokens: 50,
      }),
    });

    const latency = Date.now() - startTime;

    if (!response.ok) {
      const error = await response.text();
      return {
        provider: 'Groq',
        success: false,
        latency,
        error: `HTTP ${response.status}: ${error.substring(0, 200)}`,
      };
    }

    const data = await response.json();
    const responseText = data.choices[0]?.message?.content || 'No response';

    return {
      provider: 'Groq',
      success: true,
      latency,
      responsePreview: responseText.substring(0, 100),
    };
  } catch (error) {
    return {
      provider: 'Groq',
      success: false,
      latency: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

function formatResult(result: TestResult): string {
  const icon = result.success ? '‚úÖ' : '‚ùå';
  const status = result.success ? 'SUCCESS' : 'FAILED';
  
  let output = `\n${icon} ${result.provider}: ${status}`;
  
  if (result.latency) {
    output += `\n   Latency: ${result.latency}ms`;
  }
  
  if (result.success && result.responsePreview) {
    output += `\n   Response: "${result.responsePreview}"`;
  }
  
  if (!result.success && result.error) {
    output += `\n   Error: ${result.error}`;
  }
  
  return output;
}

async function main() {
  console.log('üîç Testing AI Providers...\n');
  console.log('=' .repeat(60));
  
  const hasOpenRouter = !!process.env.OPENROUTER_API_KEY;
  const hasGroq = !!process.env.GROQ_API_KEY;
  
  console.log('üìã Configuration:');
  console.log(`   OpenRouter API Key: ${hasOpenRouter ? '‚úÖ Found' : '‚ùå Missing'}`);
  console.log(`   Groq API Key:       ${hasGroq ? '‚úÖ Found' : '‚ùå Missing'}`);
  console.log('=' .repeat(60));
  
  const results: TestResult[] = [];
  
  if (hasOpenRouter) {
    console.log('\nüß™ Testing OpenRouter...');
    const result = await testOpenRouter();
    results.push(result);
    console.log(formatResult(result));
  }
  
  if (hasGroq) {
    console.log('\nüß™ Testing Groq...');
    const result = await testGroq();
    results.push(result);
    console.log(formatResult(result));
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä Summary:');
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`   Total providers tested: ${results.length}`);
  console.log(`   ‚úÖ Successful: ${successful.length}`);
  console.log(`   ‚ùå Failed: ${failed.length}`);
  
  if (successful.length > 0) {
    const avgLatency = successful.reduce((sum, r) => sum + (r.latency || 0), 0) / successful.length;
    console.log(`   ‚ö° Average latency: ${Math.round(avgLatency)}ms`);
  }
  
  console.log('=' .repeat(60));
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (successful.length === 0) {
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã');
    console.log('   3. –î–ª—è OpenRouter: https://openrouter.ai/keys');
    console.log('   4. –î–ª—è Groq: https://console.groq.com/keys');
    console.log('   5. –ï—Å–ª–∏ –≤ –†–§: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenRouter (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ VPN)\n');
  } else {
    console.log('\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –í–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    
    if (hasOpenRouter && successful.some(r => r.provider === 'OpenRouter')) {
      console.log('   üåç OpenRouter —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –†–§!');
    }
    
    if (hasGroq && failed.some(r => r.provider === 'Groq')) {
      console.log('   ‚ö†Ô∏è  Groq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω VPN –≤ –†–§)');
    }
    
    console.log('\n   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: npm run dev\n');
  }
}

main().catch(console.error);
